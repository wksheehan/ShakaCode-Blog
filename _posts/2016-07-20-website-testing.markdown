---
layout: post
title: "Getting set up with Friends and Guests"
date: 2016-07-20 10:01
categories: jekyll update
---
About a week ago, I visited with Justin and Dylan at Justin's house. We met in his office, which had a stand-up desk with a couple of computers, a fancy keyboard, and a microphone. When I first came in, Justin and Dylan were talking over Screen Hero with Rob (another coworker), addressing some of the issues with their website Friends and Guests. As they went through different "flows" (such as logging in, creating a property, and sending guest list invitations), they found errors and things that could be improved. Then they made note of them on this website called Trello, which uses a Japanese post-it-note method of organizing different tasks based on priority. They had tons of uncompleted tasks on there, which really made me realize how intricate a process developing a website is.

A lot of times they weren't exactly sure what was going wrong, but after consulting each other and checking out the error messages, they would figure it out. Justin, as the boss, was driving most of the improvements to match his image of the website, and then together they would figure out who in their company would fix certain issues. Here I came to understand that since making a website is way too involved for one person, but with a team of people individuals can be assigned different parts of the website. One person may only contribute to one or two parts of the website, but when everyone's work is put together a nice product comes out.

As I stood in that office observing, I learned a lot of things. Most noticeably was how cool it was that for them, going to work meant staying at home, wearing board shorts and a T-shirt so that they could hit up the beach whenever they felt like it. The whole company is spread out across the nation, working on their computers and interacting with each other online. No papers, no business suits, no driving to work. Another thing was how hip these guys were. They use Slack as their prime source of communication, which is perfect for companies like theirs. As they text each other, they would say things like "LOL", use emojis, and understand that kids my age don't really use Facebook as much as they do snapchat and Instagram. I also just got a nice overview of how the whole process of making a website works--from developing, reviewing, and launching it.

As I said before, everyone on the team is kind of assigned their own part of the website to work on. They make these changes in different [branches](https://en.wikipedia.org/wiki/Branching_(version_control)) of code which doesn't affect the actual website until it is [merged](https://en.wikipedia.org/wiki/Merge_(version_control)) to the main branch, called "master." For this to get approved, people on the team issue a pull request, asking the rest of the team to review their code changes, make their own changes, and or comment about the code. Once everyone's checked it out and it passed the built in test suite, the pull request then gets merged to the master branch. This all happens on github, where the team has a repository for their code. From there, the code is updated to the "staging" website, which basically mocks what the real website will look like and how it will function. You can mess around and create accounts on the staging website to test it out manually. This is where Justin, Dylan, and Rob were doing the test flows. Once everything is basically finished (most importantly security), they launch the actual website, which does not contain any of the data (such as accounts created) found in the staging website. This all happens through Heroku. I have experience with both Heroku and Github after completing the tutorial: after each chapter I would push my code changes up to the Github repository and use Heroku to deploy the app. This website is now available to the public.

The day after I met with Justin and Dylan, they launched their website. Not all of the aspects of the website were completed, but they wanted to release it to the public to see what parts of the website they use the most. Dylan told me that most of your code doesn't actually end up getting used, so when real users sign up for the website, they can monitor their activity and see if they should make any changes and where they should focus their time on. Plus, even though it is in production, the website can still be updated with code changes. The users that do sign up to the site, whether they stumble upon it randomly or hear about from one of the ShakaCode members, they have restricted access. They sign up and then get put on a waitlist until someone from the company approves them, which allows them more access to the site (such as being able to create their own listings). Random people who currently sign up won't get approved until all the aspects to the site are done, but there are users ShakaCode invited to test it out.

My job for the past week has been to go to staging and basically try my best to break the website. So far I haven't found any errors exactly, but I did find a couple places that could be improved. I sent Dylan some messages on Slack concerning these improvements. My messages occasionally contained an annotated screenshot of where on the website I was talking about (I did this using CloudApp, something Dylan showed me that the team uses a lot). It's been fairly easy to do this but kind of boring. However, this is an important step for creating a successful website.

It has been cool being a part of the team in some way and getting a good idea of how everything works. In the end, even if I don't end up making my own website or app, this learning experience will have good applications in a lot of things. The basis of this process is learning to think in different ways and how to tackle problems. I could pursue coding in other languages too; the fundamentals are all the same, the only thing that changes is the syntax.
